
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Dacha
 * 
 */
export type Dacha = $Result.DefaultSelection<Prisma.$DachaPayload>
/**
 * Model Reyting
 * 
 */
export type Reyting = $Result.DefaultSelection<Prisma.$ReytingPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Bugun
 * 
 */
export type Bugun = $Result.DefaultSelection<Prisma.$BugunPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Dachas
 * const dachas = await prisma.dacha.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Dachas
   * const dachas = await prisma.dacha.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.dacha`: Exposes CRUD operations for the **Dacha** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dachas
    * const dachas = await prisma.dacha.findMany()
    * ```
    */
  get dacha(): Prisma.DachaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reyting`: Exposes CRUD operations for the **Reyting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reytings
    * const reytings = await prisma.reyting.findMany()
    * ```
    */
  get reyting(): Prisma.ReytingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bugun`: Exposes CRUD operations for the **Bugun** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buguns
    * const buguns = await prisma.bugun.findMany()
    * ```
    */
  get bugun(): Prisma.BugunDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Dacha: 'Dacha',
    Reyting: 'Reyting',
    User: 'User',
    Bugun: 'Bugun'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "dacha" | "reyting" | "user" | "bugun"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Dacha: {
        payload: Prisma.$DachaPayload<ExtArgs>
        fields: Prisma.DachaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DachaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DachaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>
          }
          findFirst: {
            args: Prisma.DachaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DachaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>
          }
          findMany: {
            args: Prisma.DachaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>[]
          }
          create: {
            args: Prisma.DachaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>
          }
          createMany: {
            args: Prisma.DachaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DachaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>[]
          }
          delete: {
            args: Prisma.DachaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>
          }
          update: {
            args: Prisma.DachaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>
          }
          deleteMany: {
            args: Prisma.DachaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DachaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DachaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>[]
          }
          upsert: {
            args: Prisma.DachaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DachaPayload>
          }
          aggregate: {
            args: Prisma.DachaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDacha>
          }
          groupBy: {
            args: Prisma.DachaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DachaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DachaCountArgs<ExtArgs>
            result: $Utils.Optional<DachaCountAggregateOutputType> | number
          }
        }
      }
      Reyting: {
        payload: Prisma.$ReytingPayload<ExtArgs>
        fields: Prisma.ReytingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReytingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReytingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>
          }
          findFirst: {
            args: Prisma.ReytingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReytingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>
          }
          findMany: {
            args: Prisma.ReytingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>[]
          }
          create: {
            args: Prisma.ReytingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>
          }
          createMany: {
            args: Prisma.ReytingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReytingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>[]
          }
          delete: {
            args: Prisma.ReytingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>
          }
          update: {
            args: Prisma.ReytingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>
          }
          deleteMany: {
            args: Prisma.ReytingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReytingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReytingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>[]
          }
          upsert: {
            args: Prisma.ReytingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReytingPayload>
          }
          aggregate: {
            args: Prisma.ReytingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReyting>
          }
          groupBy: {
            args: Prisma.ReytingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReytingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReytingCountArgs<ExtArgs>
            result: $Utils.Optional<ReytingCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Bugun: {
        payload: Prisma.$BugunPayload<ExtArgs>
        fields: Prisma.BugunFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BugunFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BugunFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>
          }
          findFirst: {
            args: Prisma.BugunFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BugunFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>
          }
          findMany: {
            args: Prisma.BugunFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>[]
          }
          create: {
            args: Prisma.BugunCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>
          }
          createMany: {
            args: Prisma.BugunCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BugunCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>[]
          }
          delete: {
            args: Prisma.BugunDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>
          }
          update: {
            args: Prisma.BugunUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>
          }
          deleteMany: {
            args: Prisma.BugunDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BugunUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BugunUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>[]
          }
          upsert: {
            args: Prisma.BugunUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BugunPayload>
          }
          aggregate: {
            args: Prisma.BugunAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBugun>
          }
          groupBy: {
            args: Prisma.BugunGroupByArgs<ExtArgs>
            result: $Utils.Optional<BugunGroupByOutputType>[]
          }
          count: {
            args: Prisma.BugunCountArgs<ExtArgs>
            result: $Utils.Optional<BugunCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    dacha?: DachaOmit
    reyting?: ReytingOmit
    user?: UserOmit
    bugun?: BugunOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DachaCountOutputType
   */

  export type DachaCountOutputType = {
    Reyting: number
  }

  export type DachaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reyting?: boolean | DachaCountOutputTypeCountReytingArgs
  }

  // Custom InputTypes
  /**
   * DachaCountOutputType without action
   */
  export type DachaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DachaCountOutputType
     */
    select?: DachaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DachaCountOutputType without action
   */
  export type DachaCountOutputTypeCountReytingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReytingWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Reyting: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reyting?: boolean | UserCountOutputTypeCountReytingArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReytingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReytingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Dacha
   */

  export type AggregateDacha = {
    _count: DachaCountAggregateOutputType | null
    _avg: DachaAvgAggregateOutputType | null
    _sum: DachaSumAggregateOutputType | null
    _min: DachaMinAggregateOutputType | null
    _max: DachaMaxAggregateOutputType | null
  }

  export type DachaAvgAggregateOutputType = {
    id: number | null
    avg_reytig: number | null
    price: number | null
  }

  export type DachaSumAggregateOutputType = {
    id: number | null
    avg_reytig: number | null
    price: number | null
  }

  export type DachaMinAggregateOutputType = {
    id: number | null
    name: string | null
    avg_reytig: number | null
    price: number | null
    description: string | null
    image: string | null
  }

  export type DachaMaxAggregateOutputType = {
    id: number | null
    name: string | null
    avg_reytig: number | null
    price: number | null
    description: string | null
    image: string | null
  }

  export type DachaCountAggregateOutputType = {
    id: number
    name: number
    avg_reytig: number
    price: number
    description: number
    image: number
    _all: number
  }


  export type DachaAvgAggregateInputType = {
    id?: true
    avg_reytig?: true
    price?: true
  }

  export type DachaSumAggregateInputType = {
    id?: true
    avg_reytig?: true
    price?: true
  }

  export type DachaMinAggregateInputType = {
    id?: true
    name?: true
    avg_reytig?: true
    price?: true
    description?: true
    image?: true
  }

  export type DachaMaxAggregateInputType = {
    id?: true
    name?: true
    avg_reytig?: true
    price?: true
    description?: true
    image?: true
  }

  export type DachaCountAggregateInputType = {
    id?: true
    name?: true
    avg_reytig?: true
    price?: true
    description?: true
    image?: true
    _all?: true
  }

  export type DachaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dacha to aggregate.
     */
    where?: DachaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dachas to fetch.
     */
    orderBy?: DachaOrderByWithRelationInput | DachaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DachaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dachas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dachas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dachas
    **/
    _count?: true | DachaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DachaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DachaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DachaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DachaMaxAggregateInputType
  }

  export type GetDachaAggregateType<T extends DachaAggregateArgs> = {
        [P in keyof T & keyof AggregateDacha]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDacha[P]>
      : GetScalarType<T[P], AggregateDacha[P]>
  }




  export type DachaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DachaWhereInput
    orderBy?: DachaOrderByWithAggregationInput | DachaOrderByWithAggregationInput[]
    by: DachaScalarFieldEnum[] | DachaScalarFieldEnum
    having?: DachaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DachaCountAggregateInputType | true
    _avg?: DachaAvgAggregateInputType
    _sum?: DachaSumAggregateInputType
    _min?: DachaMinAggregateInputType
    _max?: DachaMaxAggregateInputType
  }

  export type DachaGroupByOutputType = {
    id: number
    name: string | null
    avg_reytig: number | null
    price: number | null
    description: string | null
    image: string | null
    _count: DachaCountAggregateOutputType | null
    _avg: DachaAvgAggregateOutputType | null
    _sum: DachaSumAggregateOutputType | null
    _min: DachaMinAggregateOutputType | null
    _max: DachaMaxAggregateOutputType | null
  }

  type GetDachaGroupByPayload<T extends DachaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DachaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DachaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DachaGroupByOutputType[P]>
            : GetScalarType<T[P], DachaGroupByOutputType[P]>
        }
      >
    >


  export type DachaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    avg_reytig?: boolean
    price?: boolean
    description?: boolean
    image?: boolean
    Reyting?: boolean | Dacha$ReytingArgs<ExtArgs>
    _count?: boolean | DachaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dacha"]>

  export type DachaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    avg_reytig?: boolean
    price?: boolean
    description?: boolean
    image?: boolean
  }, ExtArgs["result"]["dacha"]>

  export type DachaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    avg_reytig?: boolean
    price?: boolean
    description?: boolean
    image?: boolean
  }, ExtArgs["result"]["dacha"]>

  export type DachaSelectScalar = {
    id?: boolean
    name?: boolean
    avg_reytig?: boolean
    price?: boolean
    description?: boolean
    image?: boolean
  }

  export type DachaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "avg_reytig" | "price" | "description" | "image", ExtArgs["result"]["dacha"]>
  export type DachaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reyting?: boolean | Dacha$ReytingArgs<ExtArgs>
    _count?: boolean | DachaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DachaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DachaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DachaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dacha"
    objects: {
      Reyting: Prisma.$ReytingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      avg_reytig: number | null
      price: number | null
      description: string | null
      image: string | null
    }, ExtArgs["result"]["dacha"]>
    composites: {}
  }

  type DachaGetPayload<S extends boolean | null | undefined | DachaDefaultArgs> = $Result.GetResult<Prisma.$DachaPayload, S>

  type DachaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DachaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DachaCountAggregateInputType | true
    }

  export interface DachaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dacha'], meta: { name: 'Dacha' } }
    /**
     * Find zero or one Dacha that matches the filter.
     * @param {DachaFindUniqueArgs} args - Arguments to find a Dacha
     * @example
     * // Get one Dacha
     * const dacha = await prisma.dacha.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DachaFindUniqueArgs>(args: SelectSubset<T, DachaFindUniqueArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Dacha that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DachaFindUniqueOrThrowArgs} args - Arguments to find a Dacha
     * @example
     * // Get one Dacha
     * const dacha = await prisma.dacha.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DachaFindUniqueOrThrowArgs>(args: SelectSubset<T, DachaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dacha that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaFindFirstArgs} args - Arguments to find a Dacha
     * @example
     * // Get one Dacha
     * const dacha = await prisma.dacha.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DachaFindFirstArgs>(args?: SelectSubset<T, DachaFindFirstArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dacha that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaFindFirstOrThrowArgs} args - Arguments to find a Dacha
     * @example
     * // Get one Dacha
     * const dacha = await prisma.dacha.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DachaFindFirstOrThrowArgs>(args?: SelectSubset<T, DachaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Dachas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dachas
     * const dachas = await prisma.dacha.findMany()
     * 
     * // Get first 10 Dachas
     * const dachas = await prisma.dacha.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dachaWithIdOnly = await prisma.dacha.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DachaFindManyArgs>(args?: SelectSubset<T, DachaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Dacha.
     * @param {DachaCreateArgs} args - Arguments to create a Dacha.
     * @example
     * // Create one Dacha
     * const Dacha = await prisma.dacha.create({
     *   data: {
     *     // ... data to create a Dacha
     *   }
     * })
     * 
     */
    create<T extends DachaCreateArgs>(args: SelectSubset<T, DachaCreateArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Dachas.
     * @param {DachaCreateManyArgs} args - Arguments to create many Dachas.
     * @example
     * // Create many Dachas
     * const dacha = await prisma.dacha.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DachaCreateManyArgs>(args?: SelectSubset<T, DachaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dachas and returns the data saved in the database.
     * @param {DachaCreateManyAndReturnArgs} args - Arguments to create many Dachas.
     * @example
     * // Create many Dachas
     * const dacha = await prisma.dacha.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dachas and only return the `id`
     * const dachaWithIdOnly = await prisma.dacha.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DachaCreateManyAndReturnArgs>(args?: SelectSubset<T, DachaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Dacha.
     * @param {DachaDeleteArgs} args - Arguments to delete one Dacha.
     * @example
     * // Delete one Dacha
     * const Dacha = await prisma.dacha.delete({
     *   where: {
     *     // ... filter to delete one Dacha
     *   }
     * })
     * 
     */
    delete<T extends DachaDeleteArgs>(args: SelectSubset<T, DachaDeleteArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Dacha.
     * @param {DachaUpdateArgs} args - Arguments to update one Dacha.
     * @example
     * // Update one Dacha
     * const dacha = await prisma.dacha.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DachaUpdateArgs>(args: SelectSubset<T, DachaUpdateArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Dachas.
     * @param {DachaDeleteManyArgs} args - Arguments to filter Dachas to delete.
     * @example
     * // Delete a few Dachas
     * const { count } = await prisma.dacha.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DachaDeleteManyArgs>(args?: SelectSubset<T, DachaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dachas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dachas
     * const dacha = await prisma.dacha.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DachaUpdateManyArgs>(args: SelectSubset<T, DachaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dachas and returns the data updated in the database.
     * @param {DachaUpdateManyAndReturnArgs} args - Arguments to update many Dachas.
     * @example
     * // Update many Dachas
     * const dacha = await prisma.dacha.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dachas and only return the `id`
     * const dachaWithIdOnly = await prisma.dacha.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DachaUpdateManyAndReturnArgs>(args: SelectSubset<T, DachaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Dacha.
     * @param {DachaUpsertArgs} args - Arguments to update or create a Dacha.
     * @example
     * // Update or create a Dacha
     * const dacha = await prisma.dacha.upsert({
     *   create: {
     *     // ... data to create a Dacha
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dacha we want to update
     *   }
     * })
     */
    upsert<T extends DachaUpsertArgs>(args: SelectSubset<T, DachaUpsertArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Dachas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaCountArgs} args - Arguments to filter Dachas to count.
     * @example
     * // Count the number of Dachas
     * const count = await prisma.dacha.count({
     *   where: {
     *     // ... the filter for the Dachas we want to count
     *   }
     * })
    **/
    count<T extends DachaCountArgs>(
      args?: Subset<T, DachaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DachaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dacha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DachaAggregateArgs>(args: Subset<T, DachaAggregateArgs>): Prisma.PrismaPromise<GetDachaAggregateType<T>>

    /**
     * Group by Dacha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DachaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DachaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DachaGroupByArgs['orderBy'] }
        : { orderBy?: DachaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DachaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDachaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dacha model
   */
  readonly fields: DachaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dacha.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DachaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Reyting<T extends Dacha$ReytingArgs<ExtArgs> = {}>(args?: Subset<T, Dacha$ReytingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dacha model
   */
  interface DachaFieldRefs {
    readonly id: FieldRef<"Dacha", 'Int'>
    readonly name: FieldRef<"Dacha", 'String'>
    readonly avg_reytig: FieldRef<"Dacha", 'Float'>
    readonly price: FieldRef<"Dacha", 'Int'>
    readonly description: FieldRef<"Dacha", 'String'>
    readonly image: FieldRef<"Dacha", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dacha findUnique
   */
  export type DachaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * Filter, which Dacha to fetch.
     */
    where: DachaWhereUniqueInput
  }

  /**
   * Dacha findUniqueOrThrow
   */
  export type DachaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * Filter, which Dacha to fetch.
     */
    where: DachaWhereUniqueInput
  }

  /**
   * Dacha findFirst
   */
  export type DachaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * Filter, which Dacha to fetch.
     */
    where?: DachaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dachas to fetch.
     */
    orderBy?: DachaOrderByWithRelationInput | DachaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dachas.
     */
    cursor?: DachaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dachas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dachas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dachas.
     */
    distinct?: DachaScalarFieldEnum | DachaScalarFieldEnum[]
  }

  /**
   * Dacha findFirstOrThrow
   */
  export type DachaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * Filter, which Dacha to fetch.
     */
    where?: DachaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dachas to fetch.
     */
    orderBy?: DachaOrderByWithRelationInput | DachaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dachas.
     */
    cursor?: DachaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dachas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dachas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dachas.
     */
    distinct?: DachaScalarFieldEnum | DachaScalarFieldEnum[]
  }

  /**
   * Dacha findMany
   */
  export type DachaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * Filter, which Dachas to fetch.
     */
    where?: DachaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dachas to fetch.
     */
    orderBy?: DachaOrderByWithRelationInput | DachaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dachas.
     */
    cursor?: DachaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dachas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dachas.
     */
    skip?: number
    distinct?: DachaScalarFieldEnum | DachaScalarFieldEnum[]
  }

  /**
   * Dacha create
   */
  export type DachaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * The data needed to create a Dacha.
     */
    data?: XOR<DachaCreateInput, DachaUncheckedCreateInput>
  }

  /**
   * Dacha createMany
   */
  export type DachaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dachas.
     */
    data: DachaCreateManyInput | DachaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dacha createManyAndReturn
   */
  export type DachaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * The data used to create many Dachas.
     */
    data: DachaCreateManyInput | DachaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dacha update
   */
  export type DachaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * The data needed to update a Dacha.
     */
    data: XOR<DachaUpdateInput, DachaUncheckedUpdateInput>
    /**
     * Choose, which Dacha to update.
     */
    where: DachaWhereUniqueInput
  }

  /**
   * Dacha updateMany
   */
  export type DachaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dachas.
     */
    data: XOR<DachaUpdateManyMutationInput, DachaUncheckedUpdateManyInput>
    /**
     * Filter which Dachas to update
     */
    where?: DachaWhereInput
    /**
     * Limit how many Dachas to update.
     */
    limit?: number
  }

  /**
   * Dacha updateManyAndReturn
   */
  export type DachaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * The data used to update Dachas.
     */
    data: XOR<DachaUpdateManyMutationInput, DachaUncheckedUpdateManyInput>
    /**
     * Filter which Dachas to update
     */
    where?: DachaWhereInput
    /**
     * Limit how many Dachas to update.
     */
    limit?: number
  }

  /**
   * Dacha upsert
   */
  export type DachaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * The filter to search for the Dacha to update in case it exists.
     */
    where: DachaWhereUniqueInput
    /**
     * In case the Dacha found by the `where` argument doesn't exist, create a new Dacha with this data.
     */
    create: XOR<DachaCreateInput, DachaUncheckedCreateInput>
    /**
     * In case the Dacha was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DachaUpdateInput, DachaUncheckedUpdateInput>
  }

  /**
   * Dacha delete
   */
  export type DachaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
    /**
     * Filter which Dacha to delete.
     */
    where: DachaWhereUniqueInput
  }

  /**
   * Dacha deleteMany
   */
  export type DachaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dachas to delete
     */
    where?: DachaWhereInput
    /**
     * Limit how many Dachas to delete.
     */
    limit?: number
  }

  /**
   * Dacha.Reyting
   */
  export type Dacha$ReytingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    where?: ReytingWhereInput
    orderBy?: ReytingOrderByWithRelationInput | ReytingOrderByWithRelationInput[]
    cursor?: ReytingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReytingScalarFieldEnum | ReytingScalarFieldEnum[]
  }

  /**
   * Dacha without action
   */
  export type DachaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dacha
     */
    select?: DachaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dacha
     */
    omit?: DachaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DachaInclude<ExtArgs> | null
  }


  /**
   * Model Reyting
   */

  export type AggregateReyting = {
    _count: ReytingCountAggregateOutputType | null
    _avg: ReytingAvgAggregateOutputType | null
    _sum: ReytingSumAggregateOutputType | null
    _min: ReytingMinAggregateOutputType | null
    _max: ReytingMaxAggregateOutputType | null
  }

  export type ReytingAvgAggregateOutputType = {
    id: number | null
    ball: number | null
    dacha_id: number | null
    user_id: number | null
  }

  export type ReytingSumAggregateOutputType = {
    id: number | null
    ball: number | null
    dacha_id: number | null
    user_id: number | null
  }

  export type ReytingMinAggregateOutputType = {
    id: number | null
    ball: number | null
    dacha_id: number | null
    user_id: number | null
  }

  export type ReytingMaxAggregateOutputType = {
    id: number | null
    ball: number | null
    dacha_id: number | null
    user_id: number | null
  }

  export type ReytingCountAggregateOutputType = {
    id: number
    ball: number
    dacha_id: number
    user_id: number
    _all: number
  }


  export type ReytingAvgAggregateInputType = {
    id?: true
    ball?: true
    dacha_id?: true
    user_id?: true
  }

  export type ReytingSumAggregateInputType = {
    id?: true
    ball?: true
    dacha_id?: true
    user_id?: true
  }

  export type ReytingMinAggregateInputType = {
    id?: true
    ball?: true
    dacha_id?: true
    user_id?: true
  }

  export type ReytingMaxAggregateInputType = {
    id?: true
    ball?: true
    dacha_id?: true
    user_id?: true
  }

  export type ReytingCountAggregateInputType = {
    id?: true
    ball?: true
    dacha_id?: true
    user_id?: true
    _all?: true
  }

  export type ReytingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reyting to aggregate.
     */
    where?: ReytingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reytings to fetch.
     */
    orderBy?: ReytingOrderByWithRelationInput | ReytingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReytingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reytings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reytings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reytings
    **/
    _count?: true | ReytingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReytingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReytingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReytingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReytingMaxAggregateInputType
  }

  export type GetReytingAggregateType<T extends ReytingAggregateArgs> = {
        [P in keyof T & keyof AggregateReyting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReyting[P]>
      : GetScalarType<T[P], AggregateReyting[P]>
  }




  export type ReytingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReytingWhereInput
    orderBy?: ReytingOrderByWithAggregationInput | ReytingOrderByWithAggregationInput[]
    by: ReytingScalarFieldEnum[] | ReytingScalarFieldEnum
    having?: ReytingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReytingCountAggregateInputType | true
    _avg?: ReytingAvgAggregateInputType
    _sum?: ReytingSumAggregateInputType
    _min?: ReytingMinAggregateInputType
    _max?: ReytingMaxAggregateInputType
  }

  export type ReytingGroupByOutputType = {
    id: number
    ball: number
    dacha_id: number
    user_id: number
    _count: ReytingCountAggregateOutputType | null
    _avg: ReytingAvgAggregateOutputType | null
    _sum: ReytingSumAggregateOutputType | null
    _min: ReytingMinAggregateOutputType | null
    _max: ReytingMaxAggregateOutputType | null
  }

  type GetReytingGroupByPayload<T extends ReytingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReytingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReytingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReytingGroupByOutputType[P]>
            : GetScalarType<T[P], ReytingGroupByOutputType[P]>
        }
      >
    >


  export type ReytingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ball?: boolean
    dacha_id?: boolean
    user_id?: boolean
    dacha?: boolean | DachaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reyting"]>

  export type ReytingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ball?: boolean
    dacha_id?: boolean
    user_id?: boolean
    dacha?: boolean | DachaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reyting"]>

  export type ReytingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ball?: boolean
    dacha_id?: boolean
    user_id?: boolean
    dacha?: boolean | DachaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reyting"]>

  export type ReytingSelectScalar = {
    id?: boolean
    ball?: boolean
    dacha_id?: boolean
    user_id?: boolean
  }

  export type ReytingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ball" | "dacha_id" | "user_id", ExtArgs["result"]["reyting"]>
  export type ReytingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dacha?: boolean | DachaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReytingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dacha?: boolean | DachaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReytingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dacha?: boolean | DachaDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReytingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reyting"
    objects: {
      dacha: Prisma.$DachaPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ball: number
      dacha_id: number
      user_id: number
    }, ExtArgs["result"]["reyting"]>
    composites: {}
  }

  type ReytingGetPayload<S extends boolean | null | undefined | ReytingDefaultArgs> = $Result.GetResult<Prisma.$ReytingPayload, S>

  type ReytingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReytingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReytingCountAggregateInputType | true
    }

  export interface ReytingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reyting'], meta: { name: 'Reyting' } }
    /**
     * Find zero or one Reyting that matches the filter.
     * @param {ReytingFindUniqueArgs} args - Arguments to find a Reyting
     * @example
     * // Get one Reyting
     * const reyting = await prisma.reyting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReytingFindUniqueArgs>(args: SelectSubset<T, ReytingFindUniqueArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reyting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReytingFindUniqueOrThrowArgs} args - Arguments to find a Reyting
     * @example
     * // Get one Reyting
     * const reyting = await prisma.reyting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReytingFindUniqueOrThrowArgs>(args: SelectSubset<T, ReytingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reyting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingFindFirstArgs} args - Arguments to find a Reyting
     * @example
     * // Get one Reyting
     * const reyting = await prisma.reyting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReytingFindFirstArgs>(args?: SelectSubset<T, ReytingFindFirstArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reyting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingFindFirstOrThrowArgs} args - Arguments to find a Reyting
     * @example
     * // Get one Reyting
     * const reyting = await prisma.reyting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReytingFindFirstOrThrowArgs>(args?: SelectSubset<T, ReytingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reytings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reytings
     * const reytings = await prisma.reyting.findMany()
     * 
     * // Get first 10 Reytings
     * const reytings = await prisma.reyting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reytingWithIdOnly = await prisma.reyting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReytingFindManyArgs>(args?: SelectSubset<T, ReytingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reyting.
     * @param {ReytingCreateArgs} args - Arguments to create a Reyting.
     * @example
     * // Create one Reyting
     * const Reyting = await prisma.reyting.create({
     *   data: {
     *     // ... data to create a Reyting
     *   }
     * })
     * 
     */
    create<T extends ReytingCreateArgs>(args: SelectSubset<T, ReytingCreateArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reytings.
     * @param {ReytingCreateManyArgs} args - Arguments to create many Reytings.
     * @example
     * // Create many Reytings
     * const reyting = await prisma.reyting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReytingCreateManyArgs>(args?: SelectSubset<T, ReytingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reytings and returns the data saved in the database.
     * @param {ReytingCreateManyAndReturnArgs} args - Arguments to create many Reytings.
     * @example
     * // Create many Reytings
     * const reyting = await prisma.reyting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reytings and only return the `id`
     * const reytingWithIdOnly = await prisma.reyting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReytingCreateManyAndReturnArgs>(args?: SelectSubset<T, ReytingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reyting.
     * @param {ReytingDeleteArgs} args - Arguments to delete one Reyting.
     * @example
     * // Delete one Reyting
     * const Reyting = await prisma.reyting.delete({
     *   where: {
     *     // ... filter to delete one Reyting
     *   }
     * })
     * 
     */
    delete<T extends ReytingDeleteArgs>(args: SelectSubset<T, ReytingDeleteArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reyting.
     * @param {ReytingUpdateArgs} args - Arguments to update one Reyting.
     * @example
     * // Update one Reyting
     * const reyting = await prisma.reyting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReytingUpdateArgs>(args: SelectSubset<T, ReytingUpdateArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reytings.
     * @param {ReytingDeleteManyArgs} args - Arguments to filter Reytings to delete.
     * @example
     * // Delete a few Reytings
     * const { count } = await prisma.reyting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReytingDeleteManyArgs>(args?: SelectSubset<T, ReytingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reytings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reytings
     * const reyting = await prisma.reyting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReytingUpdateManyArgs>(args: SelectSubset<T, ReytingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reytings and returns the data updated in the database.
     * @param {ReytingUpdateManyAndReturnArgs} args - Arguments to update many Reytings.
     * @example
     * // Update many Reytings
     * const reyting = await prisma.reyting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reytings and only return the `id`
     * const reytingWithIdOnly = await prisma.reyting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReytingUpdateManyAndReturnArgs>(args: SelectSubset<T, ReytingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reyting.
     * @param {ReytingUpsertArgs} args - Arguments to update or create a Reyting.
     * @example
     * // Update or create a Reyting
     * const reyting = await prisma.reyting.upsert({
     *   create: {
     *     // ... data to create a Reyting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reyting we want to update
     *   }
     * })
     */
    upsert<T extends ReytingUpsertArgs>(args: SelectSubset<T, ReytingUpsertArgs<ExtArgs>>): Prisma__ReytingClient<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reytings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingCountArgs} args - Arguments to filter Reytings to count.
     * @example
     * // Count the number of Reytings
     * const count = await prisma.reyting.count({
     *   where: {
     *     // ... the filter for the Reytings we want to count
     *   }
     * })
    **/
    count<T extends ReytingCountArgs>(
      args?: Subset<T, ReytingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReytingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reyting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReytingAggregateArgs>(args: Subset<T, ReytingAggregateArgs>): Prisma.PrismaPromise<GetReytingAggregateType<T>>

    /**
     * Group by Reyting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReytingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReytingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReytingGroupByArgs['orderBy'] }
        : { orderBy?: ReytingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReytingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReytingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reyting model
   */
  readonly fields: ReytingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reyting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReytingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dacha<T extends DachaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DachaDefaultArgs<ExtArgs>>): Prisma__DachaClient<$Result.GetResult<Prisma.$DachaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reyting model
   */
  interface ReytingFieldRefs {
    readonly id: FieldRef<"Reyting", 'Int'>
    readonly ball: FieldRef<"Reyting", 'Int'>
    readonly dacha_id: FieldRef<"Reyting", 'Int'>
    readonly user_id: FieldRef<"Reyting", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Reyting findUnique
   */
  export type ReytingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * Filter, which Reyting to fetch.
     */
    where: ReytingWhereUniqueInput
  }

  /**
   * Reyting findUniqueOrThrow
   */
  export type ReytingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * Filter, which Reyting to fetch.
     */
    where: ReytingWhereUniqueInput
  }

  /**
   * Reyting findFirst
   */
  export type ReytingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * Filter, which Reyting to fetch.
     */
    where?: ReytingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reytings to fetch.
     */
    orderBy?: ReytingOrderByWithRelationInput | ReytingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reytings.
     */
    cursor?: ReytingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reytings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reytings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reytings.
     */
    distinct?: ReytingScalarFieldEnum | ReytingScalarFieldEnum[]
  }

  /**
   * Reyting findFirstOrThrow
   */
  export type ReytingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * Filter, which Reyting to fetch.
     */
    where?: ReytingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reytings to fetch.
     */
    orderBy?: ReytingOrderByWithRelationInput | ReytingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reytings.
     */
    cursor?: ReytingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reytings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reytings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reytings.
     */
    distinct?: ReytingScalarFieldEnum | ReytingScalarFieldEnum[]
  }

  /**
   * Reyting findMany
   */
  export type ReytingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * Filter, which Reytings to fetch.
     */
    where?: ReytingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reytings to fetch.
     */
    orderBy?: ReytingOrderByWithRelationInput | ReytingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reytings.
     */
    cursor?: ReytingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reytings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reytings.
     */
    skip?: number
    distinct?: ReytingScalarFieldEnum | ReytingScalarFieldEnum[]
  }

  /**
   * Reyting create
   */
  export type ReytingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * The data needed to create a Reyting.
     */
    data: XOR<ReytingCreateInput, ReytingUncheckedCreateInput>
  }

  /**
   * Reyting createMany
   */
  export type ReytingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reytings.
     */
    data: ReytingCreateManyInput | ReytingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reyting createManyAndReturn
   */
  export type ReytingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * The data used to create many Reytings.
     */
    data: ReytingCreateManyInput | ReytingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reyting update
   */
  export type ReytingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * The data needed to update a Reyting.
     */
    data: XOR<ReytingUpdateInput, ReytingUncheckedUpdateInput>
    /**
     * Choose, which Reyting to update.
     */
    where: ReytingWhereUniqueInput
  }

  /**
   * Reyting updateMany
   */
  export type ReytingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reytings.
     */
    data: XOR<ReytingUpdateManyMutationInput, ReytingUncheckedUpdateManyInput>
    /**
     * Filter which Reytings to update
     */
    where?: ReytingWhereInput
    /**
     * Limit how many Reytings to update.
     */
    limit?: number
  }

  /**
   * Reyting updateManyAndReturn
   */
  export type ReytingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * The data used to update Reytings.
     */
    data: XOR<ReytingUpdateManyMutationInput, ReytingUncheckedUpdateManyInput>
    /**
     * Filter which Reytings to update
     */
    where?: ReytingWhereInput
    /**
     * Limit how many Reytings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reyting upsert
   */
  export type ReytingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * The filter to search for the Reyting to update in case it exists.
     */
    where: ReytingWhereUniqueInput
    /**
     * In case the Reyting found by the `where` argument doesn't exist, create a new Reyting with this data.
     */
    create: XOR<ReytingCreateInput, ReytingUncheckedCreateInput>
    /**
     * In case the Reyting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReytingUpdateInput, ReytingUncheckedUpdateInput>
  }

  /**
   * Reyting delete
   */
  export type ReytingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    /**
     * Filter which Reyting to delete.
     */
    where: ReytingWhereUniqueInput
  }

  /**
   * Reyting deleteMany
   */
  export type ReytingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reytings to delete
     */
    where?: ReytingWhereInput
    /**
     * Limit how many Reytings to delete.
     */
    limit?: number
  }

  /**
   * Reyting without action
   */
  export type ReytingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    chat_id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    chat_id: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    chat_id: bigint | null
    is_bot: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    chat_id: bigint | null
    is_bot: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    first_name: number
    chat_id: number
    is_bot: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    chat_id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    chat_id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    first_name?: true
    chat_id?: true
    is_bot?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    first_name?: true
    chat_id?: true
    is_bot?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    first_name?: true
    chat_id?: true
    is_bot?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    first_name: string | null
    chat_id: bigint | null
    is_bot: boolean | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    chat_id?: boolean
    is_bot?: boolean
    Reyting?: boolean | User$ReytingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    chat_id?: boolean
    is_bot?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    chat_id?: boolean
    is_bot?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    first_name?: boolean
    chat_id?: boolean
    is_bot?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "first_name" | "chat_id" | "is_bot", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reyting?: boolean | User$ReytingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Reyting: Prisma.$ReytingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      first_name: string | null
      chat_id: bigint | null
      is_bot: boolean | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Reyting<T extends User$ReytingArgs<ExtArgs> = {}>(args?: Subset<T, User$ReytingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReytingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly first_name: FieldRef<"User", 'String'>
    readonly chat_id: FieldRef<"User", 'BigInt'>
    readonly is_bot: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Reyting
   */
  export type User$ReytingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reyting
     */
    select?: ReytingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reyting
     */
    omit?: ReytingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReytingInclude<ExtArgs> | null
    where?: ReytingWhereInput
    orderBy?: ReytingOrderByWithRelationInput | ReytingOrderByWithRelationInput[]
    cursor?: ReytingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReytingScalarFieldEnum | ReytingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Bugun
   */

  export type AggregateBugun = {
    _count: BugunCountAggregateOutputType | null
    _avg: BugunAvgAggregateOutputType | null
    _sum: BugunSumAggregateOutputType | null
    _min: BugunMinAggregateOutputType | null
    _max: BugunMaxAggregateOutputType | null
  }

  export type BugunAvgAggregateOutputType = {
    id: number | null
    dachaId: number | null
  }

  export type BugunSumAggregateOutputType = {
    id: number | null
    dachaId: number | null
  }

  export type BugunMinAggregateOutputType = {
    id: number | null
    dachaId: number | null
  }

  export type BugunMaxAggregateOutputType = {
    id: number | null
    dachaId: number | null
  }

  export type BugunCountAggregateOutputType = {
    id: number
    dachaId: number
    _all: number
  }


  export type BugunAvgAggregateInputType = {
    id?: true
    dachaId?: true
  }

  export type BugunSumAggregateInputType = {
    id?: true
    dachaId?: true
  }

  export type BugunMinAggregateInputType = {
    id?: true
    dachaId?: true
  }

  export type BugunMaxAggregateInputType = {
    id?: true
    dachaId?: true
  }

  export type BugunCountAggregateInputType = {
    id?: true
    dachaId?: true
    _all?: true
  }

  export type BugunAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bugun to aggregate.
     */
    where?: BugunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buguns to fetch.
     */
    orderBy?: BugunOrderByWithRelationInput | BugunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BugunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buguns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buguns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buguns
    **/
    _count?: true | BugunCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BugunAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BugunSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BugunMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BugunMaxAggregateInputType
  }

  export type GetBugunAggregateType<T extends BugunAggregateArgs> = {
        [P in keyof T & keyof AggregateBugun]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBugun[P]>
      : GetScalarType<T[P], AggregateBugun[P]>
  }




  export type BugunGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BugunWhereInput
    orderBy?: BugunOrderByWithAggregationInput | BugunOrderByWithAggregationInput[]
    by: BugunScalarFieldEnum[] | BugunScalarFieldEnum
    having?: BugunScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BugunCountAggregateInputType | true
    _avg?: BugunAvgAggregateInputType
    _sum?: BugunSumAggregateInputType
    _min?: BugunMinAggregateInputType
    _max?: BugunMaxAggregateInputType
  }

  export type BugunGroupByOutputType = {
    id: number
    dachaId: number
    _count: BugunCountAggregateOutputType | null
    _avg: BugunAvgAggregateOutputType | null
    _sum: BugunSumAggregateOutputType | null
    _min: BugunMinAggregateOutputType | null
    _max: BugunMaxAggregateOutputType | null
  }

  type GetBugunGroupByPayload<T extends BugunGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BugunGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BugunGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BugunGroupByOutputType[P]>
            : GetScalarType<T[P], BugunGroupByOutputType[P]>
        }
      >
    >


  export type BugunSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dachaId?: boolean
  }, ExtArgs["result"]["bugun"]>

  export type BugunSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dachaId?: boolean
  }, ExtArgs["result"]["bugun"]>

  export type BugunSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dachaId?: boolean
  }, ExtArgs["result"]["bugun"]>

  export type BugunSelectScalar = {
    id?: boolean
    dachaId?: boolean
  }

  export type BugunOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dachaId", ExtArgs["result"]["bugun"]>

  export type $BugunPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bugun"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dachaId: number
    }, ExtArgs["result"]["bugun"]>
    composites: {}
  }

  type BugunGetPayload<S extends boolean | null | undefined | BugunDefaultArgs> = $Result.GetResult<Prisma.$BugunPayload, S>

  type BugunCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BugunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BugunCountAggregateInputType | true
    }

  export interface BugunDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bugun'], meta: { name: 'Bugun' } }
    /**
     * Find zero or one Bugun that matches the filter.
     * @param {BugunFindUniqueArgs} args - Arguments to find a Bugun
     * @example
     * // Get one Bugun
     * const bugun = await prisma.bugun.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BugunFindUniqueArgs>(args: SelectSubset<T, BugunFindUniqueArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bugun that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BugunFindUniqueOrThrowArgs} args - Arguments to find a Bugun
     * @example
     * // Get one Bugun
     * const bugun = await prisma.bugun.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BugunFindUniqueOrThrowArgs>(args: SelectSubset<T, BugunFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bugun that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunFindFirstArgs} args - Arguments to find a Bugun
     * @example
     * // Get one Bugun
     * const bugun = await prisma.bugun.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BugunFindFirstArgs>(args?: SelectSubset<T, BugunFindFirstArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bugun that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunFindFirstOrThrowArgs} args - Arguments to find a Bugun
     * @example
     * // Get one Bugun
     * const bugun = await prisma.bugun.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BugunFindFirstOrThrowArgs>(args?: SelectSubset<T, BugunFindFirstOrThrowArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buguns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buguns
     * const buguns = await prisma.bugun.findMany()
     * 
     * // Get first 10 Buguns
     * const buguns = await prisma.bugun.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bugunWithIdOnly = await prisma.bugun.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BugunFindManyArgs>(args?: SelectSubset<T, BugunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bugun.
     * @param {BugunCreateArgs} args - Arguments to create a Bugun.
     * @example
     * // Create one Bugun
     * const Bugun = await prisma.bugun.create({
     *   data: {
     *     // ... data to create a Bugun
     *   }
     * })
     * 
     */
    create<T extends BugunCreateArgs>(args: SelectSubset<T, BugunCreateArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buguns.
     * @param {BugunCreateManyArgs} args - Arguments to create many Buguns.
     * @example
     * // Create many Buguns
     * const bugun = await prisma.bugun.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BugunCreateManyArgs>(args?: SelectSubset<T, BugunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Buguns and returns the data saved in the database.
     * @param {BugunCreateManyAndReturnArgs} args - Arguments to create many Buguns.
     * @example
     * // Create many Buguns
     * const bugun = await prisma.bugun.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Buguns and only return the `id`
     * const bugunWithIdOnly = await prisma.bugun.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BugunCreateManyAndReturnArgs>(args?: SelectSubset<T, BugunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bugun.
     * @param {BugunDeleteArgs} args - Arguments to delete one Bugun.
     * @example
     * // Delete one Bugun
     * const Bugun = await prisma.bugun.delete({
     *   where: {
     *     // ... filter to delete one Bugun
     *   }
     * })
     * 
     */
    delete<T extends BugunDeleteArgs>(args: SelectSubset<T, BugunDeleteArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bugun.
     * @param {BugunUpdateArgs} args - Arguments to update one Bugun.
     * @example
     * // Update one Bugun
     * const bugun = await prisma.bugun.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BugunUpdateArgs>(args: SelectSubset<T, BugunUpdateArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buguns.
     * @param {BugunDeleteManyArgs} args - Arguments to filter Buguns to delete.
     * @example
     * // Delete a few Buguns
     * const { count } = await prisma.bugun.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BugunDeleteManyArgs>(args?: SelectSubset<T, BugunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buguns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buguns
     * const bugun = await prisma.bugun.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BugunUpdateManyArgs>(args: SelectSubset<T, BugunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buguns and returns the data updated in the database.
     * @param {BugunUpdateManyAndReturnArgs} args - Arguments to update many Buguns.
     * @example
     * // Update many Buguns
     * const bugun = await prisma.bugun.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Buguns and only return the `id`
     * const bugunWithIdOnly = await prisma.bugun.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BugunUpdateManyAndReturnArgs>(args: SelectSubset<T, BugunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bugun.
     * @param {BugunUpsertArgs} args - Arguments to update or create a Bugun.
     * @example
     * // Update or create a Bugun
     * const bugun = await prisma.bugun.upsert({
     *   create: {
     *     // ... data to create a Bugun
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bugun we want to update
     *   }
     * })
     */
    upsert<T extends BugunUpsertArgs>(args: SelectSubset<T, BugunUpsertArgs<ExtArgs>>): Prisma__BugunClient<$Result.GetResult<Prisma.$BugunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buguns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunCountArgs} args - Arguments to filter Buguns to count.
     * @example
     * // Count the number of Buguns
     * const count = await prisma.bugun.count({
     *   where: {
     *     // ... the filter for the Buguns we want to count
     *   }
     * })
    **/
    count<T extends BugunCountArgs>(
      args?: Subset<T, BugunCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BugunCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bugun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BugunAggregateArgs>(args: Subset<T, BugunAggregateArgs>): Prisma.PrismaPromise<GetBugunAggregateType<T>>

    /**
     * Group by Bugun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugunGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BugunGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BugunGroupByArgs['orderBy'] }
        : { orderBy?: BugunGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BugunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBugunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bugun model
   */
  readonly fields: BugunFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bugun.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BugunClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bugun model
   */
  interface BugunFieldRefs {
    readonly id: FieldRef<"Bugun", 'Int'>
    readonly dachaId: FieldRef<"Bugun", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Bugun findUnique
   */
  export type BugunFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * Filter, which Bugun to fetch.
     */
    where: BugunWhereUniqueInput
  }

  /**
   * Bugun findUniqueOrThrow
   */
  export type BugunFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * Filter, which Bugun to fetch.
     */
    where: BugunWhereUniqueInput
  }

  /**
   * Bugun findFirst
   */
  export type BugunFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * Filter, which Bugun to fetch.
     */
    where?: BugunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buguns to fetch.
     */
    orderBy?: BugunOrderByWithRelationInput | BugunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buguns.
     */
    cursor?: BugunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buguns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buguns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buguns.
     */
    distinct?: BugunScalarFieldEnum | BugunScalarFieldEnum[]
  }

  /**
   * Bugun findFirstOrThrow
   */
  export type BugunFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * Filter, which Bugun to fetch.
     */
    where?: BugunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buguns to fetch.
     */
    orderBy?: BugunOrderByWithRelationInput | BugunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buguns.
     */
    cursor?: BugunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buguns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buguns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buguns.
     */
    distinct?: BugunScalarFieldEnum | BugunScalarFieldEnum[]
  }

  /**
   * Bugun findMany
   */
  export type BugunFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * Filter, which Buguns to fetch.
     */
    where?: BugunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buguns to fetch.
     */
    orderBy?: BugunOrderByWithRelationInput | BugunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buguns.
     */
    cursor?: BugunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buguns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buguns.
     */
    skip?: number
    distinct?: BugunScalarFieldEnum | BugunScalarFieldEnum[]
  }

  /**
   * Bugun create
   */
  export type BugunCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * The data needed to create a Bugun.
     */
    data: XOR<BugunCreateInput, BugunUncheckedCreateInput>
  }

  /**
   * Bugun createMany
   */
  export type BugunCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buguns.
     */
    data: BugunCreateManyInput | BugunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bugun createManyAndReturn
   */
  export type BugunCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * The data used to create many Buguns.
     */
    data: BugunCreateManyInput | BugunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bugun update
   */
  export type BugunUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * The data needed to update a Bugun.
     */
    data: XOR<BugunUpdateInput, BugunUncheckedUpdateInput>
    /**
     * Choose, which Bugun to update.
     */
    where: BugunWhereUniqueInput
  }

  /**
   * Bugun updateMany
   */
  export type BugunUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buguns.
     */
    data: XOR<BugunUpdateManyMutationInput, BugunUncheckedUpdateManyInput>
    /**
     * Filter which Buguns to update
     */
    where?: BugunWhereInput
    /**
     * Limit how many Buguns to update.
     */
    limit?: number
  }

  /**
   * Bugun updateManyAndReturn
   */
  export type BugunUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * The data used to update Buguns.
     */
    data: XOR<BugunUpdateManyMutationInput, BugunUncheckedUpdateManyInput>
    /**
     * Filter which Buguns to update
     */
    where?: BugunWhereInput
    /**
     * Limit how many Buguns to update.
     */
    limit?: number
  }

  /**
   * Bugun upsert
   */
  export type BugunUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * The filter to search for the Bugun to update in case it exists.
     */
    where: BugunWhereUniqueInput
    /**
     * In case the Bugun found by the `where` argument doesn't exist, create a new Bugun with this data.
     */
    create: XOR<BugunCreateInput, BugunUncheckedCreateInput>
    /**
     * In case the Bugun was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BugunUpdateInput, BugunUncheckedUpdateInput>
  }

  /**
   * Bugun delete
   */
  export type BugunDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
    /**
     * Filter which Bugun to delete.
     */
    where: BugunWhereUniqueInput
  }

  /**
   * Bugun deleteMany
   */
  export type BugunDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buguns to delete
     */
    where?: BugunWhereInput
    /**
     * Limit how many Buguns to delete.
     */
    limit?: number
  }

  /**
   * Bugun without action
   */
  export type BugunDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bugun
     */
    select?: BugunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bugun
     */
    omit?: BugunOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DachaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    avg_reytig: 'avg_reytig',
    price: 'price',
    description: 'description',
    image: 'image'
  };

  export type DachaScalarFieldEnum = (typeof DachaScalarFieldEnum)[keyof typeof DachaScalarFieldEnum]


  export const ReytingScalarFieldEnum: {
    id: 'id',
    ball: 'ball',
    dacha_id: 'dacha_id',
    user_id: 'user_id'
  };

  export type ReytingScalarFieldEnum = (typeof ReytingScalarFieldEnum)[keyof typeof ReytingScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    chat_id: 'chat_id',
    is_bot: 'is_bot'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BugunScalarFieldEnum: {
    id: 'id',
    dachaId: 'dachaId'
  };

  export type BugunScalarFieldEnum = (typeof BugunScalarFieldEnum)[keyof typeof BugunScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type DachaWhereInput = {
    AND?: DachaWhereInput | DachaWhereInput[]
    OR?: DachaWhereInput[]
    NOT?: DachaWhereInput | DachaWhereInput[]
    id?: IntFilter<"Dacha"> | number
    name?: StringNullableFilter<"Dacha"> | string | null
    avg_reytig?: FloatNullableFilter<"Dacha"> | number | null
    price?: IntNullableFilter<"Dacha"> | number | null
    description?: StringNullableFilter<"Dacha"> | string | null
    image?: StringNullableFilter<"Dacha"> | string | null
    Reyting?: ReytingListRelationFilter
  }

  export type DachaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    avg_reytig?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    Reyting?: ReytingOrderByRelationAggregateInput
  }

  export type DachaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DachaWhereInput | DachaWhereInput[]
    OR?: DachaWhereInput[]
    NOT?: DachaWhereInput | DachaWhereInput[]
    name?: StringNullableFilter<"Dacha"> | string | null
    avg_reytig?: FloatNullableFilter<"Dacha"> | number | null
    price?: IntNullableFilter<"Dacha"> | number | null
    description?: StringNullableFilter<"Dacha"> | string | null
    image?: StringNullableFilter<"Dacha"> | string | null
    Reyting?: ReytingListRelationFilter
  }, "id">

  export type DachaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    avg_reytig?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    _count?: DachaCountOrderByAggregateInput
    _avg?: DachaAvgOrderByAggregateInput
    _max?: DachaMaxOrderByAggregateInput
    _min?: DachaMinOrderByAggregateInput
    _sum?: DachaSumOrderByAggregateInput
  }

  export type DachaScalarWhereWithAggregatesInput = {
    AND?: DachaScalarWhereWithAggregatesInput | DachaScalarWhereWithAggregatesInput[]
    OR?: DachaScalarWhereWithAggregatesInput[]
    NOT?: DachaScalarWhereWithAggregatesInput | DachaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Dacha"> | number
    name?: StringNullableWithAggregatesFilter<"Dacha"> | string | null
    avg_reytig?: FloatNullableWithAggregatesFilter<"Dacha"> | number | null
    price?: IntNullableWithAggregatesFilter<"Dacha"> | number | null
    description?: StringNullableWithAggregatesFilter<"Dacha"> | string | null
    image?: StringNullableWithAggregatesFilter<"Dacha"> | string | null
  }

  export type ReytingWhereInput = {
    AND?: ReytingWhereInput | ReytingWhereInput[]
    OR?: ReytingWhereInput[]
    NOT?: ReytingWhereInput | ReytingWhereInput[]
    id?: IntFilter<"Reyting"> | number
    ball?: IntFilter<"Reyting"> | number
    dacha_id?: IntFilter<"Reyting"> | number
    user_id?: IntFilter<"Reyting"> | number
    dacha?: XOR<DachaScalarRelationFilter, DachaWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReytingOrderByWithRelationInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
    dacha?: DachaOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReytingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReytingWhereInput | ReytingWhereInput[]
    OR?: ReytingWhereInput[]
    NOT?: ReytingWhereInput | ReytingWhereInput[]
    ball?: IntFilter<"Reyting"> | number
    dacha_id?: IntFilter<"Reyting"> | number
    user_id?: IntFilter<"Reyting"> | number
    dacha?: XOR<DachaScalarRelationFilter, DachaWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ReytingOrderByWithAggregationInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
    _count?: ReytingCountOrderByAggregateInput
    _avg?: ReytingAvgOrderByAggregateInput
    _max?: ReytingMaxOrderByAggregateInput
    _min?: ReytingMinOrderByAggregateInput
    _sum?: ReytingSumOrderByAggregateInput
  }

  export type ReytingScalarWhereWithAggregatesInput = {
    AND?: ReytingScalarWhereWithAggregatesInput | ReytingScalarWhereWithAggregatesInput[]
    OR?: ReytingScalarWhereWithAggregatesInput[]
    NOT?: ReytingScalarWhereWithAggregatesInput | ReytingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reyting"> | number
    ball?: IntWithAggregatesFilter<"Reyting"> | number
    dacha_id?: IntWithAggregatesFilter<"Reyting"> | number
    user_id?: IntWithAggregatesFilter<"Reyting"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    first_name?: StringNullableFilter<"User"> | string | null
    chat_id?: BigIntNullableFilter<"User"> | bigint | number | null
    is_bot?: BoolNullableFilter<"User"> | boolean | null
    Reyting?: ReytingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrderInput | SortOrder
    chat_id?: SortOrderInput | SortOrder
    is_bot?: SortOrderInput | SortOrder
    Reyting?: ReytingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    first_name?: StringNullableFilter<"User"> | string | null
    chat_id?: BigIntNullableFilter<"User"> | bigint | number | null
    is_bot?: BoolNullableFilter<"User"> | boolean | null
    Reyting?: ReytingListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrderInput | SortOrder
    chat_id?: SortOrderInput | SortOrder
    is_bot?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    first_name?: StringNullableWithAggregatesFilter<"User"> | string | null
    chat_id?: BigIntNullableWithAggregatesFilter<"User"> | bigint | number | null
    is_bot?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
  }

  export type BugunWhereInput = {
    AND?: BugunWhereInput | BugunWhereInput[]
    OR?: BugunWhereInput[]
    NOT?: BugunWhereInput | BugunWhereInput[]
    id?: IntFilter<"Bugun"> | number
    dachaId?: IntFilter<"Bugun"> | number
  }

  export type BugunOrderByWithRelationInput = {
    id?: SortOrder
    dachaId?: SortOrder
  }

  export type BugunWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BugunWhereInput | BugunWhereInput[]
    OR?: BugunWhereInput[]
    NOT?: BugunWhereInput | BugunWhereInput[]
    dachaId?: IntFilter<"Bugun"> | number
  }, "id">

  export type BugunOrderByWithAggregationInput = {
    id?: SortOrder
    dachaId?: SortOrder
    _count?: BugunCountOrderByAggregateInput
    _avg?: BugunAvgOrderByAggregateInput
    _max?: BugunMaxOrderByAggregateInput
    _min?: BugunMinOrderByAggregateInput
    _sum?: BugunSumOrderByAggregateInput
  }

  export type BugunScalarWhereWithAggregatesInput = {
    AND?: BugunScalarWhereWithAggregatesInput | BugunScalarWhereWithAggregatesInput[]
    OR?: BugunScalarWhereWithAggregatesInput[]
    NOT?: BugunScalarWhereWithAggregatesInput | BugunScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bugun"> | number
    dachaId?: IntWithAggregatesFilter<"Bugun"> | number
  }

  export type DachaCreateInput = {
    name?: string | null
    avg_reytig?: number | null
    price?: number | null
    description?: string | null
    image?: string | null
    Reyting?: ReytingCreateNestedManyWithoutDachaInput
  }

  export type DachaUncheckedCreateInput = {
    id?: number
    name?: string | null
    avg_reytig?: number | null
    price?: number | null
    description?: string | null
    image?: string | null
    Reyting?: ReytingUncheckedCreateNestedManyWithoutDachaInput
  }

  export type DachaUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avg_reytig?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Reyting?: ReytingUpdateManyWithoutDachaNestedInput
  }

  export type DachaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avg_reytig?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Reyting?: ReytingUncheckedUpdateManyWithoutDachaNestedInput
  }

  export type DachaCreateManyInput = {
    id?: number
    name?: string | null
    avg_reytig?: number | null
    price?: number | null
    description?: string | null
    image?: string | null
  }

  export type DachaUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avg_reytig?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DachaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avg_reytig?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReytingCreateInput = {
    ball: number
    dacha: DachaCreateNestedOneWithoutReytingInput
    user: UserCreateNestedOneWithoutReytingInput
  }

  export type ReytingUncheckedCreateInput = {
    id?: number
    ball: number
    dacha_id: number
    user_id: number
  }

  export type ReytingUpdateInput = {
    ball?: IntFieldUpdateOperationsInput | number
    dacha?: DachaUpdateOneRequiredWithoutReytingNestedInput
    user?: UserUpdateOneRequiredWithoutReytingNestedInput
  }

  export type ReytingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ball?: IntFieldUpdateOperationsInput | number
    dacha_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReytingCreateManyInput = {
    id?: number
    ball: number
    dacha_id: number
    user_id: number
  }

  export type ReytingUpdateManyMutationInput = {
    ball?: IntFieldUpdateOperationsInput | number
  }

  export type ReytingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ball?: IntFieldUpdateOperationsInput | number
    dacha_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    first_name?: string | null
    chat_id?: bigint | number | null
    is_bot?: boolean | null
    Reyting?: ReytingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    first_name?: string | null
    chat_id?: bigint | number | null
    is_bot?: boolean | null
    Reyting?: ReytingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    chat_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    is_bot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Reyting?: ReytingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    chat_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    is_bot?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Reyting?: ReytingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    first_name?: string | null
    chat_id?: bigint | number | null
    is_bot?: boolean | null
  }

  export type UserUpdateManyMutationInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    chat_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    is_bot?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    chat_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    is_bot?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type BugunCreateInput = {
    dachaId: number
  }

  export type BugunUncheckedCreateInput = {
    id?: number
    dachaId: number
  }

  export type BugunUpdateInput = {
    dachaId?: IntFieldUpdateOperationsInput | number
  }

  export type BugunUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dachaId?: IntFieldUpdateOperationsInput | number
  }

  export type BugunCreateManyInput = {
    id?: number
    dachaId: number
  }

  export type BugunUpdateManyMutationInput = {
    dachaId?: IntFieldUpdateOperationsInput | number
  }

  export type BugunUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dachaId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ReytingListRelationFilter = {
    every?: ReytingWhereInput
    some?: ReytingWhereInput
    none?: ReytingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReytingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DachaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avg_reytig?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type DachaAvgOrderByAggregateInput = {
    id?: SortOrder
    avg_reytig?: SortOrder
    price?: SortOrder
  }

  export type DachaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avg_reytig?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type DachaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avg_reytig?: SortOrder
    price?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type DachaSumOrderByAggregateInput = {
    id?: SortOrder
    avg_reytig?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DachaScalarRelationFilter = {
    is?: DachaWhereInput
    isNot?: DachaWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ReytingCountOrderByAggregateInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
  }

  export type ReytingAvgOrderByAggregateInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
  }

  export type ReytingMaxOrderByAggregateInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
  }

  export type ReytingMinOrderByAggregateInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
  }

  export type ReytingSumOrderByAggregateInput = {
    id?: SortOrder
    ball?: SortOrder
    dacha_id?: SortOrder
    user_id?: SortOrder
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    chat_id?: SortOrder
    is_bot?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    chat_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    chat_id?: SortOrder
    is_bot?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    chat_id?: SortOrder
    is_bot?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    chat_id?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BugunCountOrderByAggregateInput = {
    id?: SortOrder
    dachaId?: SortOrder
  }

  export type BugunAvgOrderByAggregateInput = {
    id?: SortOrder
    dachaId?: SortOrder
  }

  export type BugunMaxOrderByAggregateInput = {
    id?: SortOrder
    dachaId?: SortOrder
  }

  export type BugunMinOrderByAggregateInput = {
    id?: SortOrder
    dachaId?: SortOrder
  }

  export type BugunSumOrderByAggregateInput = {
    id?: SortOrder
    dachaId?: SortOrder
  }

  export type ReytingCreateNestedManyWithoutDachaInput = {
    create?: XOR<ReytingCreateWithoutDachaInput, ReytingUncheckedCreateWithoutDachaInput> | ReytingCreateWithoutDachaInput[] | ReytingUncheckedCreateWithoutDachaInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutDachaInput | ReytingCreateOrConnectWithoutDachaInput[]
    createMany?: ReytingCreateManyDachaInputEnvelope
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
  }

  export type ReytingUncheckedCreateNestedManyWithoutDachaInput = {
    create?: XOR<ReytingCreateWithoutDachaInput, ReytingUncheckedCreateWithoutDachaInput> | ReytingCreateWithoutDachaInput[] | ReytingUncheckedCreateWithoutDachaInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutDachaInput | ReytingCreateOrConnectWithoutDachaInput[]
    createMany?: ReytingCreateManyDachaInputEnvelope
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReytingUpdateManyWithoutDachaNestedInput = {
    create?: XOR<ReytingCreateWithoutDachaInput, ReytingUncheckedCreateWithoutDachaInput> | ReytingCreateWithoutDachaInput[] | ReytingUncheckedCreateWithoutDachaInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutDachaInput | ReytingCreateOrConnectWithoutDachaInput[]
    upsert?: ReytingUpsertWithWhereUniqueWithoutDachaInput | ReytingUpsertWithWhereUniqueWithoutDachaInput[]
    createMany?: ReytingCreateManyDachaInputEnvelope
    set?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    disconnect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    delete?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    update?: ReytingUpdateWithWhereUniqueWithoutDachaInput | ReytingUpdateWithWhereUniqueWithoutDachaInput[]
    updateMany?: ReytingUpdateManyWithWhereWithoutDachaInput | ReytingUpdateManyWithWhereWithoutDachaInput[]
    deleteMany?: ReytingScalarWhereInput | ReytingScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReytingUncheckedUpdateManyWithoutDachaNestedInput = {
    create?: XOR<ReytingCreateWithoutDachaInput, ReytingUncheckedCreateWithoutDachaInput> | ReytingCreateWithoutDachaInput[] | ReytingUncheckedCreateWithoutDachaInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutDachaInput | ReytingCreateOrConnectWithoutDachaInput[]
    upsert?: ReytingUpsertWithWhereUniqueWithoutDachaInput | ReytingUpsertWithWhereUniqueWithoutDachaInput[]
    createMany?: ReytingCreateManyDachaInputEnvelope
    set?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    disconnect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    delete?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    update?: ReytingUpdateWithWhereUniqueWithoutDachaInput | ReytingUpdateWithWhereUniqueWithoutDachaInput[]
    updateMany?: ReytingUpdateManyWithWhereWithoutDachaInput | ReytingUpdateManyWithWhereWithoutDachaInput[]
    deleteMany?: ReytingScalarWhereInput | ReytingScalarWhereInput[]
  }

  export type DachaCreateNestedOneWithoutReytingInput = {
    create?: XOR<DachaCreateWithoutReytingInput, DachaUncheckedCreateWithoutReytingInput>
    connectOrCreate?: DachaCreateOrConnectWithoutReytingInput
    connect?: DachaWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReytingInput = {
    create?: XOR<UserCreateWithoutReytingInput, UserUncheckedCreateWithoutReytingInput>
    connectOrCreate?: UserCreateOrConnectWithoutReytingInput
    connect?: UserWhereUniqueInput
  }

  export type DachaUpdateOneRequiredWithoutReytingNestedInput = {
    create?: XOR<DachaCreateWithoutReytingInput, DachaUncheckedCreateWithoutReytingInput>
    connectOrCreate?: DachaCreateOrConnectWithoutReytingInput
    upsert?: DachaUpsertWithoutReytingInput
    connect?: DachaWhereUniqueInput
    update?: XOR<XOR<DachaUpdateToOneWithWhereWithoutReytingInput, DachaUpdateWithoutReytingInput>, DachaUncheckedUpdateWithoutReytingInput>
  }

  export type UserUpdateOneRequiredWithoutReytingNestedInput = {
    create?: XOR<UserCreateWithoutReytingInput, UserUncheckedCreateWithoutReytingInput>
    connectOrCreate?: UserCreateOrConnectWithoutReytingInput
    upsert?: UserUpsertWithoutReytingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReytingInput, UserUpdateWithoutReytingInput>, UserUncheckedUpdateWithoutReytingInput>
  }

  export type ReytingCreateNestedManyWithoutUserInput = {
    create?: XOR<ReytingCreateWithoutUserInput, ReytingUncheckedCreateWithoutUserInput> | ReytingCreateWithoutUserInput[] | ReytingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutUserInput | ReytingCreateOrConnectWithoutUserInput[]
    createMany?: ReytingCreateManyUserInputEnvelope
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
  }

  export type ReytingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReytingCreateWithoutUserInput, ReytingUncheckedCreateWithoutUserInput> | ReytingCreateWithoutUserInput[] | ReytingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutUserInput | ReytingCreateOrConnectWithoutUserInput[]
    createMany?: ReytingCreateManyUserInputEnvelope
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ReytingUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReytingCreateWithoutUserInput, ReytingUncheckedCreateWithoutUserInput> | ReytingCreateWithoutUserInput[] | ReytingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutUserInput | ReytingCreateOrConnectWithoutUserInput[]
    upsert?: ReytingUpsertWithWhereUniqueWithoutUserInput | ReytingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReytingCreateManyUserInputEnvelope
    set?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    disconnect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    delete?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    update?: ReytingUpdateWithWhereUniqueWithoutUserInput | ReytingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReytingUpdateManyWithWhereWithoutUserInput | ReytingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReytingScalarWhereInput | ReytingScalarWhereInput[]
  }

  export type ReytingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReytingCreateWithoutUserInput, ReytingUncheckedCreateWithoutUserInput> | ReytingCreateWithoutUserInput[] | ReytingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReytingCreateOrConnectWithoutUserInput | ReytingCreateOrConnectWithoutUserInput[]
    upsert?: ReytingUpsertWithWhereUniqueWithoutUserInput | ReytingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReytingCreateManyUserInputEnvelope
    set?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    disconnect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    delete?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    connect?: ReytingWhereUniqueInput | ReytingWhereUniqueInput[]
    update?: ReytingUpdateWithWhereUniqueWithoutUserInput | ReytingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReytingUpdateManyWithWhereWithoutUserInput | ReytingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReytingScalarWhereInput | ReytingScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ReytingCreateWithoutDachaInput = {
    ball: number
    user: UserCreateNestedOneWithoutReytingInput
  }

  export type ReytingUncheckedCreateWithoutDachaInput = {
    id?: number
    ball: number
    user_id: number
  }

  export type ReytingCreateOrConnectWithoutDachaInput = {
    where: ReytingWhereUniqueInput
    create: XOR<ReytingCreateWithoutDachaInput, ReytingUncheckedCreateWithoutDachaInput>
  }

  export type ReytingCreateManyDachaInputEnvelope = {
    data: ReytingCreateManyDachaInput | ReytingCreateManyDachaInput[]
    skipDuplicates?: boolean
  }

  export type ReytingUpsertWithWhereUniqueWithoutDachaInput = {
    where: ReytingWhereUniqueInput
    update: XOR<ReytingUpdateWithoutDachaInput, ReytingUncheckedUpdateWithoutDachaInput>
    create: XOR<ReytingCreateWithoutDachaInput, ReytingUncheckedCreateWithoutDachaInput>
  }

  export type ReytingUpdateWithWhereUniqueWithoutDachaInput = {
    where: ReytingWhereUniqueInput
    data: XOR<ReytingUpdateWithoutDachaInput, ReytingUncheckedUpdateWithoutDachaInput>
  }

  export type ReytingUpdateManyWithWhereWithoutDachaInput = {
    where: ReytingScalarWhereInput
    data: XOR<ReytingUpdateManyMutationInput, ReytingUncheckedUpdateManyWithoutDachaInput>
  }

  export type ReytingScalarWhereInput = {
    AND?: ReytingScalarWhereInput | ReytingScalarWhereInput[]
    OR?: ReytingScalarWhereInput[]
    NOT?: ReytingScalarWhereInput | ReytingScalarWhereInput[]
    id?: IntFilter<"Reyting"> | number
    ball?: IntFilter<"Reyting"> | number
    dacha_id?: IntFilter<"Reyting"> | number
    user_id?: IntFilter<"Reyting"> | number
  }

  export type DachaCreateWithoutReytingInput = {
    name?: string | null
    avg_reytig?: number | null
    price?: number | null
    description?: string | null
    image?: string | null
  }

  export type DachaUncheckedCreateWithoutReytingInput = {
    id?: number
    name?: string | null
    avg_reytig?: number | null
    price?: number | null
    description?: string | null
    image?: string | null
  }

  export type DachaCreateOrConnectWithoutReytingInput = {
    where: DachaWhereUniqueInput
    create: XOR<DachaCreateWithoutReytingInput, DachaUncheckedCreateWithoutReytingInput>
  }

  export type UserCreateWithoutReytingInput = {
    first_name?: string | null
    chat_id?: bigint | number | null
    is_bot?: boolean | null
  }

  export type UserUncheckedCreateWithoutReytingInput = {
    id?: number
    first_name?: string | null
    chat_id?: bigint | number | null
    is_bot?: boolean | null
  }

  export type UserCreateOrConnectWithoutReytingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReytingInput, UserUncheckedCreateWithoutReytingInput>
  }

  export type DachaUpsertWithoutReytingInput = {
    update: XOR<DachaUpdateWithoutReytingInput, DachaUncheckedUpdateWithoutReytingInput>
    create: XOR<DachaCreateWithoutReytingInput, DachaUncheckedCreateWithoutReytingInput>
    where?: DachaWhereInput
  }

  export type DachaUpdateToOneWithWhereWithoutReytingInput = {
    where?: DachaWhereInput
    data: XOR<DachaUpdateWithoutReytingInput, DachaUncheckedUpdateWithoutReytingInput>
  }

  export type DachaUpdateWithoutReytingInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avg_reytig?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DachaUncheckedUpdateWithoutReytingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avg_reytig?: NullableFloatFieldUpdateOperationsInput | number | null
    price?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutReytingInput = {
    update: XOR<UserUpdateWithoutReytingInput, UserUncheckedUpdateWithoutReytingInput>
    create: XOR<UserCreateWithoutReytingInput, UserUncheckedCreateWithoutReytingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReytingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReytingInput, UserUncheckedUpdateWithoutReytingInput>
  }

  export type UserUpdateWithoutReytingInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    chat_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    is_bot?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUncheckedUpdateWithoutReytingInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    chat_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    is_bot?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ReytingCreateWithoutUserInput = {
    ball: number
    dacha: DachaCreateNestedOneWithoutReytingInput
  }

  export type ReytingUncheckedCreateWithoutUserInput = {
    id?: number
    ball: number
    dacha_id: number
  }

  export type ReytingCreateOrConnectWithoutUserInput = {
    where: ReytingWhereUniqueInput
    create: XOR<ReytingCreateWithoutUserInput, ReytingUncheckedCreateWithoutUserInput>
  }

  export type ReytingCreateManyUserInputEnvelope = {
    data: ReytingCreateManyUserInput | ReytingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReytingUpsertWithWhereUniqueWithoutUserInput = {
    where: ReytingWhereUniqueInput
    update: XOR<ReytingUpdateWithoutUserInput, ReytingUncheckedUpdateWithoutUserInput>
    create: XOR<ReytingCreateWithoutUserInput, ReytingUncheckedCreateWithoutUserInput>
  }

  export type ReytingUpdateWithWhereUniqueWithoutUserInput = {
    where: ReytingWhereUniqueInput
    data: XOR<ReytingUpdateWithoutUserInput, ReytingUncheckedUpdateWithoutUserInput>
  }

  export type ReytingUpdateManyWithWhereWithoutUserInput = {
    where: ReytingScalarWhereInput
    data: XOR<ReytingUpdateManyMutationInput, ReytingUncheckedUpdateManyWithoutUserInput>
  }

  export type ReytingCreateManyDachaInput = {
    id?: number
    ball: number
    user_id: number
  }

  export type ReytingUpdateWithoutDachaInput = {
    ball?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReytingNestedInput
  }

  export type ReytingUncheckedUpdateWithoutDachaInput = {
    id?: IntFieldUpdateOperationsInput | number
    ball?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReytingUncheckedUpdateManyWithoutDachaInput = {
    id?: IntFieldUpdateOperationsInput | number
    ball?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReytingCreateManyUserInput = {
    id?: number
    ball: number
    dacha_id: number
  }

  export type ReytingUpdateWithoutUserInput = {
    ball?: IntFieldUpdateOperationsInput | number
    dacha?: DachaUpdateOneRequiredWithoutReytingNestedInput
  }

  export type ReytingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ball?: IntFieldUpdateOperationsInput | number
    dacha_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReytingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ball?: IntFieldUpdateOperationsInput | number
    dacha_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}